name: GitHub Action CDK Deploy - AWS Lambda functions
on: push
jobs:
  Check_Branch:
    runs-on: ubuntu-latest
    # env:
    #   WORKING_DIR: 'src'
    outputs:
      BRANCH_NAME: ${{ steps.step_ext_branch.outputs.branch }}
      FORCE_DEPLOY: ${{ contains(github.event.head_commit.message, '[force_deploy]') }}
      deploy_pimcore-translation-api-stack: ${{ steps.changes.outputs.deploy_pimcore-translation-api-stack }}             
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"         
        id: step_ext_branch      
      - name: Check out repository code
        uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.ref }}
          filters: |
            deploy_pimcore-translation-api-stack:
              - 'cdk-lambda-functions/bin/pimcore-translation-api.ts'
              - 'cdk-lambda-functions/lib/pimcore-translation-api-stack.ts'
              - 'cdk-lambda-functions/src/pimcore-translation-api/**'              
  CDK_Deploy:
    runs-on: ubuntu-latest
    needs: Check_Branch    
    if: |      
      (needs.Check_Branch.outputs.BRANCH_NAME == 'develop'
      || needs.Check_Branch.outputs.BRANCH_NAME == 'test'
      || needs.Check_Branch.outputs.BRANCH_NAME == 'prod')
      && (needs.Check_Branch.outputs.deploy_pimcore-translation-api-stack == 'true')
    steps:      
      - name: Set env
        id: env
        run: |          
          if [ "${{ needs.Check_Branch.outputs.BRANCH_NAME }}" = "develop" ]; then
            echo "::set-output name=access_key::DEV_AWS_ACCESS_KEY_ID"    
            echo "::set-output name=secret_access_key::DEV_AWS_SECRET_ACCESS_KEY"
            echo "::set-output name=stage::DEV"            
          elif [ "${{ needs.Check_Branch.outputs.BRANCH_NAME }}" = "test" ]; then
            echo "::set-output name=access_key::TEST_AWS_ACCESS_KEY_ID"   
            echo "::set-output name=secret_access_key::TEST_AWS_SECRET_ACCESS_KEY" 
            echo "::set-output name=stage::TEST"            
          elif [ "${{ needs.Check_Branch.outputs.BRANCH_NAME }}" = "prod" ]; then
            echo "::set-output name=access_key::PROD_AWS_ACCESS_KEY_ID"   
            echo "::set-output name=secret_access_key::PROD_AWS_SECRET_ACCESS_KEY"      
            echo "::set-output name=stage::PROD"   
          fi             
      - uses: "aws-actions/configure-aws-credentials@v1"
        with:
          aws-access-key-id: ${{ secrets[steps.env.outputs.access_key] }}
          aws-secret-access-key: ${{ secrets[steps.env.outputs.secret_access_key] }}
          aws-region: "eu-central-1"
      - uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/cdk-build-secrets/accessKeyId"
          env_variable_name: "cdk_access_key_id"
      - uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/cdk-build-secrets/secretAccessKeyId"
          env_variable_name: "cdk_secret_access_key_id"          
      - name: Display branch name
        run: echo "Branch name is ${{needs.Check_Branch.outputs.BRANCH_NAME}}, so do deploy!"     
      - name: Check out repository code
        uses: actions/checkout@v2       
      - name: set up node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: install globally required npm packages
        run: |
          npm install -g npm@8 esbuild-linux-64
      - name: npm install project dependencies
        run: npm install
        working-directory: cdk-lambda-functions 
      ### deploy pimcore-translation-api-stack
      - name: cdk deploy pimcore-translation-api-stack
        if: needs.Check_Branch.outputs.deploy_pimcore-translation-api-stack == 'true' || needs.Check_Branch.outputs.FORCE_DEPLOY == 'true' 
        run: |
          echo "deploy pimcore-translation-api-stack"
          DEPLOYMENT_ENV=${{ steps.env.outputs.stage }} npx cdk deploy -a 'npx ts-node --prefer-ts-exts bin/pimcore-translation-api.ts' --require-approval never          
        env:
          AWS_ACCESS_KEY_ID: ${{ env.CDK_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ env.CDK_SECRET_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: 'eu-central-1'
        working-directory: cdk-lambda-functions